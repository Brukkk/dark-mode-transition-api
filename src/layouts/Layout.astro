---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class=" min-h-svh bg-white dark:bg-black">
		<slot />
	</body>
	<script is:inline>
		const theme = (() => {
		  if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		  }
		  if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
			return "dark";
		  }
		  return "light";
		})();
	  
		if (theme === "light") {
		  document.documentElement.classList.remove("dark");
		} else {
		  document.documentElement.classList.add("dark");
		}
		window.localStorage.setItem("theme", theme);
	  </script>
</html>
<style is:global>
::view-transition-group(root) {
  animation-timing-function: var(--expo-out);
}

::view-transition-new(root) {
  mask: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><defs><filter id="blur"><feGaussianBlur stdDeviation="2"/></filter></defs><circle cx="40" cy="0" r="18" fill="white" filter="url(%23blur)"/></svg>') top right / 0 no-repeat;
  mask-origin: content-box;
  animation: scale 1s;
  transform-origin: top right; /* Changed from top left to top right */
}

::view-transition-old(root),
  .dark::view-transition-old(root) {
  animation: scale 1s;
  transform-origin: top right; /* Changed from top left to top right */
  z-index: -1;
}

@keyframes scale {
  to {
    mask-size: 350vmax;
  }
}

</style>
